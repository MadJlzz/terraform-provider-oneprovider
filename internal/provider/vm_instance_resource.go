package provider

import (
	"context"
	"fmt"
	"github.com/MadJlzz/terraform-provider-oneprovider/pkg/oneprovider"
	"github.com/MadJlzz/terraform-provider-oneprovider/pkg/oneprovider/vm"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"strconv"
)

var (
	_ resource.ResourceWithConfigure = &vmInstanceResource{}
)

type vmInstanceResource struct {
	svc *oneprovider.OneProvider
}

type vmInstanceResourceModel struct {
	ID             types.String `tfsdk:"id"`
	LocationId     types.String `tfsdk:"location_id"`
	InstanceSizeId types.String `tfsdk:"instance_size_id"`
	TemplateId     types.String `tfsdk:"template_id"`
	Hostname       types.String `tfsdk:"hostname"`
	IPAddress      types.String `tfsdk:"ip_address"`
	Password       types.String `tfsdk:"password"`
}

func NewVmInstanceResource() resource.Resource {
	return &vmInstanceResource{}
}

func (r *vmInstanceResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_vm_instance"
}

func (r *vmInstanceResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description:         "Create a new VM instance.",
		MarkdownDescription: "Create a new VM instance.",
		Attributes: map[string]schema.Attribute{
			// Inputs
			"location_id": schema.StringAttribute{
				Description: "Location ID referencing where the VM instance will be created",
				Required:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"instance_size_id": schema.StringAttribute{
				Description: "Instance size ID referencing the hardware specs of the VM instance",
				Required:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"template_id": schema.StringAttribute{
				Description: "Template ID referencing the OS to use for that VM instance",
				Required:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"hostname": schema.StringAttribute{
				Description: "Hostname of the VM instance",
				Required:    true,
			},
			// Outputs
			"id": schema.StringAttribute{
				Description: "ID of the VM instance. Generated by the provider.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"ip_address": schema.StringAttribute{
				Description: "IP address of the VM instance",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"password": schema.StringAttribute{
				Description: "Password of the root user",
				Computed:    true,
				Sensitive:   true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
		},
	}
}

func (r *vmInstanceResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Always perform a nil check when handling ProviderData because Terraform
	// sets that data after it calls the ConfigureProvider RPC.
	if req.ProviderData == nil {
		return
	}
	tflog.Info(ctx, "configuring datasource dependencies")
	svc, ok := req.ProviderData.(*oneprovider.OneProvider)
	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Data Source Configure Type",
			fmt.Sprintf("Expected oneprovider.API, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)
		return
	}
	r.svc = svc
}

func (r *vmInstanceResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *vmInstanceResourceModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	locationId, _ := strconv.Atoi(data.LocationId.ValueString())
	instanceSizeId, _ := strconv.Atoi(data.InstanceSizeId.ValueString())

	createRequest := &vm.InstanceCreateRequest{
		LocationId:     locationId,
		InstanceSizeId: instanceSizeId,
		TemplateId:     data.TemplateId.ValueString(),
		Hostname:       data.Hostname.ValueString(),
	}
	vmInstance, err := r.svc.VM.CreateInstance(ctx, createRequest)
	if err != nil {
		resp.Diagnostics.AddError(
			"Unable to create VM instance",
			err.Error(),
		)
		return
	}

	data.ID = types.StringValue(vmInstance.Response.Id)
	data.IPAddress = types.StringValue(vmInstance.Response.IpAddress)
	data.Password = types.StringValue(vmInstance.Response.Password)

	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *vmInstanceResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *vmInstanceResourceModel

	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	info, err := r.svc.VM.GetInstanceByID(ctx, data.ID.ValueString())
	if err != nil {
		resp.Diagnostics.AddError(
			"Unable to get VM instance by ID",
			err.Error(),
		)
		return
	}

	// TODO: It seems we need to do other calls to replace the names by their ID... (e.g city)
	//        "server_info": {
	//            "status": "success",
	//            "ipaddress": "123.123.123.123",
	//            "hostname": "hostname.example.com",
	//            "template": "linux-centos-6.5-x86_64-min-gen2-v1",
	//            "memory": "549755813888",
	//            "space_gb": "20",
	//            "ram_mb": "512",
	//            "bandwidth_gb": "750",
	//            "cpus": "1",
	//            "country": "FR",
	//            "city": "Paris",
	//            "plan": "01d20c1",
	//            "rootpassword": "dyx6M8kbZUg6enmqxJRI"
	//            "is_legacy" : "false"
	//        },
	data.Hostname = types.StringValue(info.Response.ServerInfo.Hostname)
	data.IPAddress = types.StringValue(info.Response.ServerInfo.IpAddress)

	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *vmInstanceResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *vmInstanceResourceModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	updateRequest := &vm.InstanceUpdateRequest{
		VMId:     data.ID.ValueString(),
		Hostname: data.Hostname.ValueString(),
	}

	_, err := r.svc.VM.UpdateInstance(ctx, updateRequest)
	if err != nil {
		resp.Diagnostics.AddError(
			"Unable to update VM instance",
			err.Error(),
		)
		return
	}

	data.Hostname = types.StringValue(updateRequest.Hostname)

	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *vmInstanceResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *vmInstanceResourceModel

	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	destroyRequest := &vm.InstanceDestroyRequest{
		VMId:         data.ID.ValueString(),
		ConfirmClose: true,
	}

	_, err := r.svc.VM.DestroyInstance(ctx, destroyRequest)
	if err != nil {
		resp.Diagnostics.AddError(
			"Unable to destroy VM instance",
			err.Error(),
		)
		return
	}
}
